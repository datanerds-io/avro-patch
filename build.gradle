apply from: 'project.gradle'
apply from: 'gradle/jacoco.gradle'

apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'osgi'

repositories {
    mavenCentral()
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources';
    from sourceSets.main.allSource;
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc';
    from javadoc.destinationDir;
}

// Some OSGi information
jar {
    manifest {
        version = project.version
        symbolicName = "$project.group.$baseName"
    }
}

artifacts {
    archives jar;
    archives sourcesJar;
    archives javadocJar;
}

if (doSign) {
    signing {
        sign configurations.archives
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof org.gradle.plugins.signing.Sign }) {
        allprojects {
            ext.'signing.keyId'               = ext.has('signing.keyId')
                                                    ? ext.'signing.keyId'
                                                    : console().readLine("\nSigning Key Id:\n")
            ext.'signing.secretKeyRingFile'   = ext.has('signing.secretKeyRingFile')
                                                    ? ext.'signing.secretKeyRingFile'
                                                    : console().readLine("\nRing File (absolute path):\n")
            ext.'signing.password'            = ext.has('signing.password')
                                                    ? ext.'signing.password'
                                                    : String.valueOf(console().readPassword("\nSigning Password:\n"))
        }

        println "Signing artifacts with key ${ext.'signing.keyId'} from ${ext.'signing.secretKeyRingFile'}.\n"
    }
}

uploadArchives.repositories.mavenDeployer {
    if (doSign) {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
    }

    if (hasUploadTask) {
        def mavenUsername = ext.has('mavenUsername')
                                ? ext.'mavenUsername'
                                : console().readLine("\nMaven Deployment User:\n")
        def mavenPassword = ext.has('mavenPassword')
                                ? ext.'mavenPassword'
                                : String.valueOf(console().readPassword("\nMaven Deployment Password:\n"))

        repository(url: repositoryUrl) {
            authentication(userName: mavenUsername, password: mavenPassword)
        }

        snapshotRepository(url: snapshotRepositoryUrl) {
            authentication(userName: mavenUsername, password: mavenPassword)
        }
    }
}

[install.repositories.mavenInstaller, uploadArchives.repositories.mavenDeployer]*.pom*.whenConfigured { pom ->
    pom.project {
        name project.name;
        packaging "jar";
        description project.about;
        url project.url;

        scm {
            url gitrwscm;
            connection gitrwscm;
            developerConnection gitroscm;
        }

        licenses {
            license {
                name "Apache Software License, version 2.0";
                url "http://www.apache.org/licenses/LICENSE-2.0";
                distribution "repo";
            }
        }

        developers {
            developer {
                id project.developerId;
                name project.developer;
                email project.developerMail;
            }
        }
    }
}

def console() {
    if (!System.console()) {
        throw new GradleException("Could not find Console object." +
                "Ensure task is not run by Gradle daemon (e.g. use option --no-daemon).")
    }
    System.console()
}